diff --git a/node_modules/@openspacelabs/react-native-zoomable-view/src/ReactNativeZoomableView.tsx b/node_modules/@openspacelabs/react-native-zoomable-view/src/ReactNativeZoomableView.tsx
index 5d41626..f386a50 100644
--- a/node_modules/@openspacelabs/react-native-zoomable-view/src/ReactNativeZoomableView.tsx
+++ b/node_modules/@openspacelabs/react-native-zoomable-view/src/ReactNativeZoomableView.tsx
@@ -213,6 +213,11 @@ class ReactNativeZoomableView extends Component<
           offsetState.boundaryCrossedAnimInEffect = true;
           getBoundaryCrossedAnim(this.panAnim[axis], boundOffset).start(() => {
             offsetState.boundaryCrossedAnimInEffect = false;
+            const event = this._getZoomableViewEventObject({
+              translateX: this.panAnim.x._value,
+              translateY: this.panAnim.y._value,
+            });
+            this.props.onTranslateXY?.(event);
           });
           return;
         }
@@ -429,7 +434,13 @@ class ReactNativeZoomableView extends Component<
       getPanMomentumDecayAnim(this.panAnim, {
         x: gestureState.vx / this.zoomLevel,
         y: gestureState.vy / this.zoomLevel,
-      }).start();
+      }).start(() => {
+        const event = this._getZoomableViewEventObject({
+          translateX: this.panAnim.x._value,
+          translateY: this.panAnim.y._value,
+        });
+        this.props.onTranslateXY?.(event);
+      });
     }
 
     if (this.longPressTimeout) {
@@ -928,8 +939,15 @@ class ReactNativeZoomableView extends Component<
       });
       prevScale = newScale;
     });
+
     getZoomToAnimation(this.zoomAnim, newZoomLevel).start(() => {
       this.zoomAnim.removeListener(listenerId);
+      const event = this._getZoomableViewEventObject({
+        zoomLevel: newZoomLevel,
+        translateX: this.panAnim.x._value,
+        translateY: this.panAnim.y._value,
+      });
+      this.props.onTranslateXY?.(event);
     });
     // == Zoom Animation Ends ==
 
